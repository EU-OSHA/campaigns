<?php

include_once 'hwc.features.inc';

define('ROLE_CAMPAIGN_PARTNER', 'campaign partner');
define('ROLE_SUPERVISOR', 'supervisor');

/**
 * Implementation of hook_views_api().
 */
function hwc_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_permission().
 */
function hwc_permission() {
  return array(
    'access private area' => array(
      'title' => t('Access the private area'),
      'description' => t('Access content inside the private area'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function hwc_menu() {
  $items['admin/config/system/hwc'] = array(
    'title' => 'HWC Configuration',
    'description' => 'Configure parameters for the HWC website',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hwc_admin_config_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'hwc_admin.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/activate/%'] = array(
    'title' => 'Activate user',
    'description' => 'Check if user was synchronized, if not trigger synchronization',
    'page callback' => 'hwc_user_activate',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hwc_form_user_login_alter(&$form, &$form_state) {
  drupal_add_js('jQuery(document).ready(function () {jQuery("#edit-name").focus();});', 'inline');
}

/**
 * Implements hook_user_login().
 */
function hwc_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    // If the user is a partner, redirect to the corresponding partner profile
    if (in_array(ROLE_CAMPAIGN_PARTNER, $account->roles) && !empty($account->workbench_access)) {
      $sections = array_keys($account->workbench_access);
      foreach($sections as $id_section) {
        if ($partner = hwc_partner_by_section_id_load($id_section)) {
          $edit['redirect'] = 'node/' . $partner->nid;
          break;
        }
      }
    }
  }
}

function hwc_req_param($form_state, $name, $default = NULL) {
  if (!empty($form_state['values'][$name])) {
    $ret = $form_state['values'][$name];
    if (is_array($ret)) {
      $ret = array_filter($ret);
    }
    return $ret;
  }
  if (!empty($_GET[$name])) {
    if (is_array($_GET[$name])) {
      $ret = array();
      foreach($_GET[$name] as $v) {
        $ret[] = check_plain($v);
      }
      return $ret;
    }
    else {
      return check_plain($_GET[$name]);
    }
  }
  return $default;
}

/**
 * Implements hook_field_extra_fields().
 */
function hwc_field_extra_fields() {

  $share_widget = array(
    'display' => array(
      'share_widget' => array(
        'label' => t('Share widget'),
        'description' => t('The bar with links to social websites'),
        'weight' => 0,
      )
    )
  );
  $extra['node']['news'] = $share_widget;
  $extra['node']['events'] = $share_widget;
  $extra['node']['article'] = $share_widget;
  return $extra;
}

function hwc_mime_friendly_acronym($mime) {
  $mappings = array(
    'application/msword' => t('DOC'),
    'application/vnd.ms-excel' => t('XLS'),
    'application/vnd.ms-powerpoint' => t('PPT'),
    'application/pdf' => t('PDF'),
    'video/quicktime' => t('Movie'),
    'audio/mpeg' => t('Audio'),
    'audio/wav' => t('Audio'),
    'image/jpeg' => t('Image'),
    'image/png' => t('Image'),
    'image/gif' => t('Image'),
    'application/zip' => t('ZIP'),
    'text/html' => t('HTML'),
    'text/plain' => t('TXT'),
    'application/octet-stream' => t('BIN'),
  );
  if (array_key_exists($mime, $mappings)) {
    return $mappings[$mime];
  }
  return $mime;
}


/**
* Implements hook_field_formatter_info().
*/
function hwc_field_formatter_info() {
  $info = array(
    'field_file' => array(
      'label' => 'Resource file formatter',
      'field types' => array('file'),
      'description' => 'Displays default icon per file type and file description.',
    ),
  );
  return $info;
}


/**
* Implements hook_theme().
*/
function hwc_theme() {
  return array(
    'hwc_file_format' => array(
      'variables' => array('file' => NULL, 'delta' => NULL),
    ),
    'news_share_widget' => array(
      'variables' => array(
        'url' => '', // Page URL
        'node' => array(), // Current node
        'tweet_url' => '',
        'language' => '', // Current language
        'options' => array(), // Additional configuration options
      ),
      'template' => 'templates/news_share_widget',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function hwc_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['title_body'] = array(
    'label' => t('Title body'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['body'] = array(
    'label' => t('Body'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_field_formatter_view().
*/
function hwc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'field_file':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'hwc_file_format',
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;
  }
  return $element;
}

/*
* Formats the related resources (attached files) as icon and description/filename
*/
function theme_hwc_file_format($element) {
  $file = (object) $element['file'];
  $icon_directory = drupal_get_path('theme', 'hwc_frontend') . '/images/file_icons';
  $name = ($file->description != NULL) ? $file->description : $file->filename;
  $output = '<a href="' . file_create_url($file->uri) . '">';
  $output .= theme('file_icon', array(
    'file' => $file,
    'icon_directory' => $icon_directory
  ));
  $output .= '<span>' . $name . '</span>';
  $size = @filesize($file->uri);
  if ($size) {
    $output .= '<span class="file_size">(' . format_size($size) . ')</span>';
  }
  $output .= '</a>';
  return $output;
}

/**
 * Implments hook_form_FORM_ID_alter().
 */
function hwc_form_chosen_admin_settings_alter(&$form, $form_state) {
  // Add options to chosen 30.
  $form['chosen_minimum_single']['#options']['30'] = '30';
  $form['chosen_minimum_multiple']['#options']['30'] = '30';
}

/**
 * Implements hook_form_alter().
 */
function hwc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (isset($form['field_activity'])
    && !empty($form['#node'])
    && empty($form['#node']->nid)
    && empty($form['field_activity'][LANGUAGE_NONE]['#default_value'])) {

    if ($tid = osha_taxonomies_load_activity_by_code('raising_awareness_3')) {
      $form['field_activity'][LANGUAGE_NONE]['#default_value'][] = $tid;
    }
  }
  if (isset($form['field_activity'])) {
    $form['field_activity'][LANGUAGE_NONE]['#multiple'] = FALSE;
  }
  if (in_array($form_id, array('events_node_form', 'news_node_form'))) {
    if ($user->uid != 1) {
      $form['field_tags']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function hwc_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  if ($entity_type == 'node') {
    // Attach the current campaign tags to the created news and events (HCW-350)
    $new = empty($entity->nid);
    $news_event = in_array($entity->type, array('news', 'events'));
    if ($new && $news_event && $curr_tags = variable_get('hwc_current_campaign_tags')) {
      $tags = field_get_items('node', $entity, 'field_tags');
      if (empty($tags)) {
        $existing_tags = taxonomy_term_load_multiple($curr_tags);
        if (!empty($existing_tags)) {
          foreach (array_keys($existing_tags) as $tid) {
            $entity->field_tags[LANGUAGE_NONE][] = array('tid' => $tid);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function hwc_node_view($node, $view_mode, $langcode) {
  if ($node->nid == 225) { // Partner registration page
    if (!empty($_GET['id'])) {
      $_SESSION['appform_id'] = $_GET['id'];
    }
    if (!empty($_GET['mf'])) {
      $_SESSION['mf'] = $_GET['mf'];
    }
  }
  if ($view_mode == 'full' && in_array($node->type, array('news', 'events', 'article'))) {
    $extra_fields = field_info_extra_fields('node', $node->type, 'display');
    if (!empty($extra_fields['share_widget']['display']['default']['visible'])) {
      $options = array();
      if ($node->type == 'article') {
        $options['rss_hide'] = 1;
      }
      if ($node->type == 'events') {
        $options['rss_url'] = url('rss-feeds/latest/events.xml', array('absolute' => TRUE));
      }
      $node->content['share_widget'] = array('#markup' => hwc_news_share_widget($node, $options));
    }
  }
}

function hwc_news_share_widget($node, $options = array()) {
  global $language;
  /** @var stdClass $wrapper */
  $wrapper = entity_metadata_wrapper('node', $node);
  // Add services javascript.
  drupal_add_js(drupal_get_path('module', 'hwc') . '/js/share_widget.js');
  // Add facebook app key.
  $fb_app_key = variable_get('fb_app_key', '');
  drupal_add_js(array('hwc' => array('fb_app_key' => $fb_app_key)), 'setting');
  $url = url('/node/' . $node->nid, array('absolute' => TRUE));
  $title = $wrapper->title_field->value();
  $site_name = variable_get('site_name', '');
  // Construct the tweet.
  $twitter_text = $title . ' | ' . $site_name;
  $tweet_url = url('https://twitter.com/intent/tweet', array(
    'query' => array(
      'original_referer' => $url,
      'text' => $twitter_text,
      'url' => shorten_url($url),
    ),
  ));
  $vars = array(
    'url' => $url,
    'tweet_url' => $tweet_url,
    'node' => $node,
    'language' => $language,
    'options' => $options,
  );
  return theme('news_share_widget', $vars);
}

/**
 * Allows modules to edit the Workbench Access node form element.
 *
 * This convenience function runs a hook_form_alter() targeted only at
 * the form element defined by Workbench Access.
 *
 * @param &$element
 *   The form element defined by workbench_access_form_alter(), passed
 *   by reference.
 * @param &$form_state
 *   The current form state, passed by reference.
 * @param $active
 *   The active data information for the access scheme.
 *
 * @see workbench_access_get_active_tree()
 *
 */
function hwc_workbench_access_node_element_alter(&$element, $form_state, $active) {
  $allow_section_field = _hwc_get_allowed_section_node_types();
  $form_id = $form_state['build_info']['form_id'];
  $form = drupal_retrieve_form($form_id, $form_state);

  if (!empty($form['#node_edit_form']) && !in_array($form['#node']->type, $allow_section_field)) {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_presave().
 */
function hwc_node_presave($node) {
  // Set section to default one for the nodes that have section field hidden.
  $allow_section_field = _hwc_get_allowed_section_node_types();
  if (!in_array($node->type, $allow_section_field) && variable_get('workbench_access_node_type_' . $node->type, FALSE)) {
    if (empty($node->workbench_access)) {
      $node->workbench_access['section'] = 'section';
    }
  }
}

/**
 * Get array of node types that are allowed to be per section.
 *
 * @return array
 */
function _hwc_get_allowed_section_node_types() {
  return array('news','events');
}

function _hwc_segment_options_list() {
  $return = array('0' => t('All audience'));
  $vocabulary = taxonomy_vocabulary_machine_name_load('segment');
  if (!empty($vocabulary)) {
    $terms = taxonomy_get_tree($vocabulary->vid);
    foreach($terms as $key => $term) {
      $return[$term->tid] = $term->name;
    }
  }
  return $return;
}

/**
 * Hook menu to trigger user synchronization
 * @param $email
 */
function hwc_user_activate($mail) {
  if (empty($_GET['token']) || variable_get('hwc_user_activate_token') != $_GET['token']) {
    drupal_add_http_header('Status', '400 Missing token');
    echo '400 Missing token';
    drupal_exit();
    die();
  }

  // Check the user
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->propertyCondition('mail', $mail)
    ->count();
  $count = $query->execute();
  if ($count > 0) {
    drupal_add_http_header('Status', '400 User already exists');
    echo '400 User already exists';
    drupal_exit();
    die();
  }

  // Lookup the record
  $ldap_account = NULL;
  if ($auth_conf = ldap_authentication_get_valid_conf()) {
    /**
     * @var string $sid
     * @var LdapServer $ldap_server
     */
    foreach ($auth_conf->enabledAuthenticationServers as $sid => $ldap_server) {
      if ($result = $ldap_server->search('ou=people,dc=osha,dc=europa,dc=eu', 'mail=' . $mail, array('uid'))) {
        if (!empty($result[0]['uid'][0])) {
          $uid = $result[0]['uid'][0];
          $dn = $result[0]['dn'];
          require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
          $ldap_account = (object) array(
            'dn' => $dn,
            'name' => $uid,
            'mail' => $mail,
            'status' => 1,
            'created' => REQUEST_TIME,
            'access' => REQUEST_TIME,
            'login' => REQUEST_TIME,
            'is_new' => TRUE,
          );
          break;
        }
      }
    }
  }
  if ($ldap_account) {
    if ($account = user_save($ldap_account)) {

      $edit['pass'] = user_password(32);
      user_save($account, $edit);

      watchdog('hwc', 'Activating Drupal account <em>!uid</em> from LDAP dn: !dn', array(
        '!dn' => $ldap_account->dn,
        '!uid' => $ldap_account->name
      ), WATCHDOG_WARNING);
      // Generate one time password reset link
      print user_pass_reset_url($account);
      drupal_exit();
      die();
    }
    else {
      watchdog('hwc', 'Failed to activate new Drupal account <em>!uid</em> from LDAP dn: !dn', array(
        '!dn' => $ldap_account->dn,
        '!uid' => $ldap_account->name
      ), WATCHDOG_ERROR);
      drupal_add_http_header('Status', '500 Failed to save the user');
      print '500 Failed to save the user';
      drupal_exit();
      die();
    }
  }
  else {
    drupal_add_http_header('Status', '404 User not found');
    echo '404 User not found';
    drupal_exit();
    die();
  }
}

/**
 * Implements hook_pathologic_alter().
 *
 * Some links such as FOP, are starting with fop/ and do need to be "fixed"
 * due to HTTP server redirects.
 */
function osha_pathologic_alter(&$url_params, $parts, $settings) {
  if (preg_match('/^forms\/partner\//m', $url_params['path'])) {
    $url_params['options']['use_original'] = TRUE;
  }
}