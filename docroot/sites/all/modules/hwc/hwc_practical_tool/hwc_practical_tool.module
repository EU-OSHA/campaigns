<?php
/**
 * @file
 * Code for the HWC Practical tool feature.
 */

include_once 'hwc_practical_tool.features.inc';

/**
 * Implements hook_block_info().
 */
function hwc_practical_tool_block_info() {
  $blocks = array();
  $blocks['hwc_practical_tool_listing'] = array(
    'info' => t('Practical tools listing'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['hwc_practical_tool_language_list'] = array(
    'info' => t('Practical tool language list'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hwc_practical_tool_block_view($delta = '') {
  $block = array();
  if ($delta == 'hwc_practical_tool_language_list') {
    if ($node = menu_get_object()) {
      $q = db_select('languages', 'l');
      $q->fields('l', array('language', 'name', 'native'));
      $q->innerJoin('entity_translation', 'a', 'l.language = a.language');
      $q->condition('a.entity_id', $node->nid);
      $q->condition('a.entity_type', 'node');
      $languages = $q->execute()->fetchAll();

      $block['content'] = theme('hwc_practical_tool_language_list', array(
          'languages' => $languages,
        )
      );
    }
  }
  if ($delta == 'hwc_practical_tool_listing') {
    module_load_include('inc', 'hwc_practical_tool', 'hwc_practical_tool.pages');
    $block['content'] = drupal_get_form('hwc_practical_tool_menu_tools_form');
  }
  return $block;
}

/**
 * Implements hook_field_formatter_info().
 */
function hwc_practical_tool_field_formatter_info() {
  $info = array(
    'access_tool_link_and_language' => array(
      'label' => t('Access tool link and language'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label' => t('Visit tool in:'),
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_theme().
 */
function hwc_practical_tool_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'hwc_practical_tool');
  $theme['hwc_practical_tool_language_list'] = array(
    'template' => 'hwc_practical_tool_language_list',
    'variables' => array(
      'languages' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_and_language'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_and_language',
    'variables' => array(
      'items' => NULL,
      'label' => NULL,
    ),
    'path' => $path . '/templates',
  );
  return $theme;
}

/**
 * Implements hook_field_formatter_view().
 */
function hwc_practical_tool_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'access_tool_link_and_language':
      $settings = $display['settings'];
      $label = trim($settings['label']);
      dpm($display);

      $element = array(
        '#theme' => 'access_tool_link_and_language',
        '#items' => $items,
        '#label' => $label,
      );

      break;
  }
  return $element;
}

/**
 * Formats the list of languages using the label and the chosen separator
 */
function theme_language_list_formatter($element) {
  $items = $element['items'];
  $label = $element['label'];
  $separator = $element['separator'];
  $output = '';

  if(!empty($items)) {
    $output = '<div class="practical-tool-available-languages">';

    if ($label != '') {
      $output .= '<b>' . t($label) . '</b> ';
    }

    foreach($items as $key => $lang) {
      $language = (object) $lang;
      $output .= t($language->name) . ' (' . strtoupper($language->langcode) . ')';
      if($key < count($items) - 1) {
        $output .= $separator . ' ';
      }
    }

    $output .= '</div>';
  }

  return $output;
}

/**
 * Formats the list of languages using the label and the chosen separator and each item is a link to an external site of a practical tool
 */
function theme_link_tool_language_list_formatter($element) {
  $entity = $element['entity'];
  $field_name = 'field_access_tool_link_fc';
  $items = $element['items'];
  $label = $element['link_label'];
  $separator = $element['link_separator'];
  $external_links = array();
  $output = '';

  if (!empty($items)) {
    $output .= '<div class="practical-tool-visit-tool-site">';

    if ($label != '') {
      $output .= '<b>' . t($label) . '</b> ';
    }

    if (!empty($entity->{$field_name}[LANGUAGE_NONE])) {
      foreach($entity->{$field_name}[LANGUAGE_NONE] as $key => $field_coll_val) {
        $field_coll = field_collection_item_load($field_coll_val['value']);
        if (!empty($field_coll->field_access_tool_link[LANGUAGE_NONE][0]['url'])
          && !empty($field_coll->field_available_languages[LANGUAGE_NONE][0]['value'])) {
          $external_links[$field_coll->field_available_languages[LANGUAGE_NONE][0]['value']] = $field_coll->field_access_tool_link[LANGUAGE_NONE][0]['url'];
        }
      }
    }

    $languages = language_list();
    foreach($external_links as $key => $lang) {
      $language = $languages[$key];
      $langcode = $language->langcode;

      $output .= '<span class="glyphicon glyphicon-chevron-right"></span>';
      if (isset($external_links[$langcode])) {
        $output .= l($language->native, $external_links[$langcode], array(
          'external' => TRUE,
          'attributes' => array(
            'title' => t('External website in @language.', array('@language' => $language->name)),
            'target' => '_blank'
          ),
        ));
      } else {
        $output .= l($language->native, NULL, array(
          'external' => TRUE,
          'fragment' => FALSE,
          'attributes' => array(
            'title' => t('External website in @language not available yet.', array('@language' => $language->name))
          ),
        ));
      }

      if($key < count($items) - 1) {
        $output .= $separator . ' ';
      }
    }
    $output .= '</div>';
  }

  return $output;
}
