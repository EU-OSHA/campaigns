<?php
/**
 * @file
 * Code for the HWC Partner feature.
 */

include_once 'hwc_partner.features.inc';
include_once 'hwc_partner.inc';

define ('PARTNER_TYPE_OCP', '825c3b00-0dd2-4026-b292-bc76d6e49a70');
define ('PARTNER_TYPE_MP', '8b662e6e-054a-4148-8495-490ac5858964');
define ('PARTNER_TYPE_FOP', '1dca3546-7c11-49b5-b74f-a77f87f60d96');



function hwc_partner_context_plugins() {
  $plugins = array();
  $plugins['hwc_context_condition_partner_page'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'hwc_partner') .'/context',
      'file' => 'hwc_context_condition_partner_page.inc',
      'class' => 'hwc_context_condition_partner_page',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

function hwc_partner_context_registry() {
  return array(
    'conditions' => array(
      'hwc_context_condition_partner_page' => array(
        'title' => t('Page belongs to partner'),
        'description' => t('Triggers context to check if page section is the same with current user section'),
        'plugin' => 'hwc_context_condition_partner_page',
      ),
    ),
  );
}

function hwc_partner_context_page_condition() {
  if ($plugin = context_get_plugin('condition', 'hwc_context_condition_partner_page')) {
    $plugin->execute();
  }
}

function hwc_partner_menu() {
  $items = array();
  $items['hwc_partner/autocomplete'] = array(
    'title' => '',
    'page callback' => 'hwc_partner_autocomplete_users_partners',
    'access callback' => 'masquerade_menu_access',
    'access arguments' => array('autocomplete'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function hwc_partner_block_info() {
  $blocks = array();
  $blocks_infos = array('Create an event', 'Create News', 'Private Area');
  foreach ($blocks_infos as $i => $title) {
    $blocks['hwc_partner_private_link_' . $i] = array(
      'info' => t('Private link block - ' . $title),
      'status' => 1,
      'region' => '-1',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }
  $blocks['hwc_partner_profile_title'] = array(
    'info' => t('My public profile'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['hwc_partner_back_to_profile'] = array(
    'info' => t('Back to profile link'),
    'status' => 1,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_PER_USER,
    'weight' => 50,
  );
  $blocks['hwc_partner_user_account_edit'] = array(
    'info' => t('User account edit link'),
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_CACHE_PER_USER,
    'weight' => 60,
  );
  $blocks['hwc_partner_mostra_masquerade'] = array(
    'info' => t('Act as a partner'),
    'status' => 1,
    'region' => 'header',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 50,
  );
  return $blocks;
}

/**
 * Implements hook_field_extra_fields().
 */
function hwc_partner_field_extra_fields() {
  $extra['node']['partner']['display'] = array(
    'profile_update_link' => array(
      'label' => 'Profile update link',
      'description' => 'A link to update partner profile',
      'weight' => 0,
    ),
  );
  return $extra;
}

/**
 * Implements hook_block_configure().
 */
function hwc_partner_block_configure($delta = '') {
  $form = array();
  if (preg_match('/hwc_partner_private_link_[0-2]/', $delta)) {
    // Get the number of the block (0,1,2)
    $it = substr($delta, -1);
    $form['hwc_partner_private_link_' . $it . '_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Link title'),
      '#size' => 60,
      '#description' => 'This text will appear at the top of the block.',
      '#default_value' => variable_get('hwc_partner_private_link_' . $it . '_title', ''),
    );
    $form['hwc_partner_private_link_' . $it . '_description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#size' => 60,
      '#description' => 'This text will appear as a description under the title.',
      '#default_value' => variable_get('hwc_partner_private_link_' . $it . '_description', ''),
    );
    $form['hwc_partner_private_link_' . $it . '_link_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Link text'),
      '#size' => 60,
      '#description' => 'This will appear after description. (e.g. "Click here").',
      '#default_value' => variable_get('hwc_partner_private_link_' . $it . '_link_text', ''),
    );
    $form['hwc_partner_private_link_' . $it . '_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Link URL'),
      '#size' => 60,
      '#description' => 'This will be the url of the private link.',
      '#default_value' => variable_get('hwc_partner_private_link_' . $it . '_url', ''),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function hwc_partner_block_save($delta = '', $edit = array()) {
  // Get the number of the block (0,1,2)
  $it = substr($delta, -1);
  variable_set('hwc_partner_private_link_' . $it . '_title', $edit['hwc_partner_private_link_' . $it . '_title']);
  variable_set('hwc_partner_private_link_' . $it . '_description', $edit['hwc_partner_private_link_' . $it . '_description']);
  variable_set('hwc_partner_private_link_' . $it . '_link_text', $edit['hwc_partner_private_link_' . $it . '_link_text']);
  variable_set('hwc_partner_private_link_' . $it . '_url', $edit['hwc_partner_private_link_' . $it . '_url']);
}

/**
 * Implements hook_block_view().
 */
function hwc_partner_block_view($delta = '') {
  $block = array();
  global $user;
  if (preg_match('/hwc_partner_private_link_[0-2]/', $delta)) {
    $it = substr($delta, -1);
    $url = variable_get('hwc_partner_private_link_' . $it . '_url', '');
    $block['subject'] = '<none>';
    if ($node = menu_get_object()) {
      $visible =
        count(array_intersect(array(
          'administrator',
          ROLE_SUPERVISOR
        ), $user->roles))
        || (in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && hwc_partner_match_user_partner($node))
        || $user->uid == 1;
      // Media partners cannot create events, hide the block
      if ($delta == 'hwc_partner_private_link_0' && in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && hwc_partner_is_mp($node)) {
        $visible = FALSE;
      }
      if ($visible) {
        $url_options = array();
        if (count(array_intersect(array(
          'administrator',
          ROLE_SUPERVISOR
        ), $user->roles))) {
          reset($node->workbench_access);
          $id_section = current($node->workbench_access);
          $url_options = array('query' => array('workbench_access' => $id_section));
        }
        $block['content'] = theme('hwc_partner_private_link_' . $it, array(
            'hwc_partner_private_link_title' => l(t(variable_get('hwc_partner_private_link_' . $it . '_title')), $url, $url_options),
            'hwc_partner_private_link_description' => t(variable_get('hwc_partner_private_link_' . $it . '_description')),
            'hwc_partner_private_link_link_text' => l(t(variable_get('hwc_partner_private_link_' . $it . '_link_text')), $url),
            'node' => $node,
            'delta' => $delta,
          )
        );
      }
    }
  }
  else if ($delta == 'hwc_partner_profile_title') {
    // Did this to use it in panels.
    $block['title'] = '<none>';
    $block['content'] = '<h1>' . t('My public profile') . '</h1>';
  }
  else if ($delta == 'hwc_partner_user_account_edit') {
    // Did this to use it in panels.
    $block['title'] = '<none>';
    $block['content'] = l(t('Change password'), 'user/' . $user->uid . '/edit');
  }
  else if ($delta == 'hwc_partner_back_to_profile') {
    $link = NULL;
    // Sometimes the $user->workbench_access is empty, force a load of WBA data.
    if (empty($user->workbench_access)) {
      workbench_access_user_load_data($user);
    }
    if (in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && !empty($user->workbench_access)) {
      $sections = array_keys($user->workbench_access);
      foreach($sections as $id_section) {
        if ($partner = hwc_partner_by_section_id_load($id_section)) {
          // Did this to use it in panels.
          $block['title'] = '<none>';
          $block['content'] = l(t('Back to Private Zone'), 'node/' . $partner->nid);
          break;
        }
      }
    }
  }
  else if ($delta == 'hwc_partner_mostra_masquerade') {
    $block['title'] = '<none>';
    $form = drupal_get_form('masquerade_block_1');
    if (isset($_SESSION['masquerading'])) {
      $block['content'] = l(t('Switch back yo your user'), 'masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch'))));
    }
    else if (in_array(ROLE_SUPERVISOR, $user->roles)) {
      $block['content'] = theme('hwc_partner_act_as_partner_block', array('content' => drupal_render($form)));
    }
  }
  return $block;
}

/**
 * Implements hook_views_pre_render().
 */
function hwc_partner_views_pre_render(&$view) {
  // Alter the more link.
  if ($view->name == 'partner_content') {
    if ($view->current_display == 'latest_partner_news') {
      $view->display_handler->set_option('link_display', 'custom_url');
      $view->display_handler->set_option('link_url', 'news');
    }
    else if ($view->current_display == 'latest_partner_events') {
      $view->display_handler->set_option('link_display', 'custom_url');
      $view->display_handler->set_option('link_url', 'events');
    }
  }
}

/**
 * Implements hook_theme().
 */
function hwc_partner_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'hwc_partner');
  for ($it = 0; $it < 3; $it++) {
    $theme['hwc_partner_private_link_' . $it] = array(
      'template' => 'hwc_partner_private_link',
      'variables' => array(
        'hwc_partner_private_link_title' => NULL,
        'hwc_partner_private_link_description' => NULL,
        'hwc_partner_private_link_url' => NULL,
        'node' => NULL,
        'delta' => NULL,
      ),
      'path' => $path . '/templates',
    );
  }
  $theme['hwc_partner_act_as_partner_block'] = array(
    'template' => 'templates/hwc_partner_act_as_partner_block',
    'variables' => array(
      'content' => '',
    ),
  );
  return $theme;
}

function hwc_partner_form_masquerade_block_1_alter(&$form, &$form_state) {
  // Add our own autocomplete to show only partners users.
  if (!empty($form['masquerade_user_field']['#autocomplete_path'])) {
    $form['masquerade_user_field']['#autocomplete_path'] = 'hwc_partner/autocomplete';
  }
}

/**
 * Auto complete ajax user callback.
 */
function hwc_partner_autocomplete_users_partners($string) {
  $matches = array();
  if (strlen($string) > 1) {
    $partner_rid = 12;

    // Get users with only PARTNER role
    $subquery = db_query('SELECT uid from users_roles GROUP BY uid HAVING COUNT(rid) = 1')->fetchCol();
    if (!empty($subquery)) {
      $query = db_select('users', 'u')->fields('u', array('uid', 'name'));
      $query->innerJoin('users_roles', 'ur', 'u.uid = ur.uid');
      $query->condition('ur.rid', $partner_rid);
      $query->condition('u.name', '%' . db_like(strtolower($string)) . '%', 'LIKE');
      $query->condition('u.uid', $subquery, 'IN');
      $result = $query->execute();

      while ($row = $result->fetchAssoc()) {
        $matches[$row['name']] = check_plain($row['name']);
      }
    }
  }
  drupal_json_output($matches);
}

//function hwc_partner_boot() {
//  global $mostra_impersonating;
//  global $theme, $user, $theme_key;
//  if (!empty($_GET['workbench_access']) && arg(2) == 'add') {
//    $mostra_impersonating = TRUE;
//    $theme = 'hwc_frontend';
////    drupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE);
//    $themes = list_themes();
//    $theme = 'hwc_frontend';
//    // Store the identifier for retrieving theme settings with.
//    $theme_key = $theme;
//    // Find all our ancestor themes and put them in an array.
//    $base_theme = array();
//    $ancestor = $theme;
//    while ($ancestor && isset($themes[$ancestor]->base_theme)) {
//      $ancestor = $themes[$ancestor]->base_theme;
//      $base_theme[] = $themes[$ancestor];
//    }
//    _drupal_theme_initialize($themes[$theme], array_reverse($base_theme));
//    // Themes can have alter functions, so reset the drupal_alter() cache.
//    drupal_static_reset('drupal_alter');
//    // Provide the page with information about the theme that's used, so that a
//    // later Ajax request can be rendered using the same theme.
//    // @see ajax_base_page_theme()
//    $setting['ajaxPageState'] = array(
//      'theme' => $theme_key,
//      'theme_token' => drupal_get_token($theme_key),
//    );
//    drupal_add_js($setting, 'setting');
//  }
//}
//
//function hwc_partner_init() {
//  global $mostra_impersonating;
//  global $theme, $user, $theme_key;
//  if (!empty($_GET['workbench_access']) && arg(2) == 'add') {
//    $mostra_impersonating = TRUE;
//    $theme = 'hwc_frontend';
////    drupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE);
//    $themes = list_themes();
//    $theme = 'hwc_frontend';
//    // Store the identifier for retrieving theme settings with.
//    $theme_key = $theme;
//    // Find all our ancestor themes and put them in an array.
//    $base_theme = array();
//    $ancestor = $theme;
//    while ($ancestor && isset($themes[$ancestor]->base_theme)) {
//      $ancestor = $themes[$ancestor]->base_theme;
//      $base_theme[] = $themes[$ancestor];
//    }
//    _drupal_theme_initialize($themes[$theme], array_reverse($base_theme));
//    // Themes can have alter functions, so reset the drupal_alter() cache.
//    drupal_static_reset('drupal_alter');
//    // Provide the page with information about the theme that's used, so that a
//    // later Ajax request can be rendered using the same theme.
//    // @see ajax_base_page_theme()
//    $setting['ajaxPageState'] = array(
//      'theme' => $theme_key,
//      'theme_token' => drupal_get_token($theme_key),
//    );
//    drupal_add_js($setting, 'setting');
//  }
//}

//function hwc_partner_init() {
//
//  if (!empty($_GET['workbench_access']) && arg(1) == 'add') {
//
//  }
//}

/**
 * Implements hook_node_view().
 */
function hwc_partner_node_view($node, $view_mode, $langcode) {
  global $user, $base_url;
  if ($node->type == 'partner' && $view_mode == 'full') {
    $w = entity_metadata_wrapper('node', $node);
    $user_is_partner = hwc_partner_match_user_partner($node)
      || in_array(ROLE_SUPERVISOR, $user->roles)
      || in_array(ROLE_ADMINISTRATOR, $user->roles)
      || in_array(ROLE_SUPERADMINISTRATOR, $user->roles);
    if ($user_is_partner && $session_id = $w->field_guid_organisation->value()) {
      $update_title = l(t('Update profile'), 'private/profile/update', array('query' => array('session_id' => $session_id)));
      $update_content = t('Any modifications in your public profile? <a href="!link"> Click here to update it.</a>', array('!link' => url('private/profile/update')));
      $update_title = '<div class="hwc-partner-private-link-block-title">' . $update_title . '</div>';
      $update_content = '<div class="hwc-partner-private-link-block-description">' . $update_content . '</div>';
      $node->content['profile_update_link'] = array(
          '#type' => 'markup',
          '#markup' => $update_title . $update_content,
      );
    }
  }
  if (in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && $node->type == 'events' && $view_mode == 'full') {
    unset($node->content['field_schedule']);
  }

  // node 253 - /private/profile/update
  if ($node->nid == 253 && !empty($_GET['session_id']) && !empty($node->content['body'][0]['#markup'])) {
    $url = '/partner/forms/index.php?mf=TRUE&session_id=' . $_GET['session_id'];
    $c = 0;
    $node->content['body'][0]['#markup'] = str_replace('/partner/forms/index.php?mf=TRUE"', $url . '"', $node->content['body'][0]['#markup'], $c);
    if ($c != 1) {
      drupal_set_message('Warning! The page might not work properly due to failure to find the form URL. Please contact technical support');
    }
  }
  // node 225 - /partner/register
  if ($node->nid == 225 && !empty($_GET['session_id']) && !empty($node->content['body'][0]['#markup'])) {
    $url = '/partner/forms/index.php?session_id=' . $_GET['session_id'];
    $c = 0;
    $node->content['body'][0]['#markup'] = str_replace('/partner/forms/index.php"', $url . '"', $node->content['body'][0]['#markup'], $c);
    if ($c != 1) {
      drupal_set_message('Warning! The page might not work properly due to failure to find the form URL. Please contact technical support');
    }
  }
}


/**
 * Implements hook_pathologic_alter().
 *
 * Some links such as FOP, are starting with fop/ and do need to be "fixed"
 * due to HTTP server redirects.
 */
function hwc_partner_pathologic_alter(&$url_params, $parts, $settings) {
  if (preg_match('/^\/partner\/forms\//m', $url_params['path'])) {
    $url_params['options']['use_original'] = TRUE;
  }
}

/**
 * Implements hook_node_delete().
 */
function hwc_partner_node_delete($node) {
  if ($node->type == 'partner') {
    $w = entity_metadata_wrapper('node', $node->nid);
    if ($guid = $w->field_guid_organisation->value()) {
      if ($term = osha_workflow_get_partner_section_by_guid($guid)) {
        taxonomy_term_delete($term->tid);
      }
    }
  }
}